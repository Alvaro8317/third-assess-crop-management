# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import crop_service_pb2 as crop__service__pb2

GRPC_GENERATED_VERSION = "1.66.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in crop_service_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class CropServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCrop = channel.unary_unary(
            "/cropservice.CropService/CreateCrop",
            request_serializer=crop__service__pb2.CreateCropRequest.SerializeToString,
            response_deserializer=crop__service__pb2.CropResponse.FromString,
            _registered_method=True,
        )
        self.GetCrop = channel.unary_unary(
            "/cropservice.CropService/GetCrop",
            request_serializer=crop__service__pb2.GetCropRequest.SerializeToString,
            response_deserializer=crop__service__pb2.CropResponse.FromString,
            _registered_method=True,
        )
        self.UpdateCrop = channel.unary_unary(
            "/cropservice.CropService/UpdateCrop",
            request_serializer=crop__service__pb2.UpdateCropRequest.SerializeToString,
            response_deserializer=crop__service__pb2.CropResponse.FromString,
            _registered_method=True,
        )
        self.DeleteCrop = channel.unary_unary(
            "/cropservice.CropService/DeleteCrop",
            request_serializer=crop__service__pb2.DeleteCropRequest.SerializeToString,
            response_deserializer=crop__service__pb2.Empty.FromString,
            _registered_method=True,
        )


class CropServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateCrop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetCrop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateCrop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteCrop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CropServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateCrop": grpc.unary_unary_rpc_method_handler(
            servicer.CreateCrop,
            request_deserializer=crop__service__pb2.CreateCropRequest.FromString,
            response_serializer=crop__service__pb2.CropResponse.SerializeToString,
        ),
        "GetCrop": grpc.unary_unary_rpc_method_handler(
            servicer.GetCrop,
            request_deserializer=crop__service__pb2.GetCropRequest.FromString,
            response_serializer=crop__service__pb2.CropResponse.SerializeToString,
        ),
        "UpdateCrop": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateCrop,
            request_deserializer=crop__service__pb2.UpdateCropRequest.FromString,
            response_serializer=crop__service__pb2.CropResponse.SerializeToString,
        ),
        "DeleteCrop": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteCrop,
            request_deserializer=crop__service__pb2.DeleteCropRequest.FromString,
            response_serializer=crop__service__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "cropservice.CropService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "cropservice.CropService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class CropService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateCrop(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/cropservice.CropService/CreateCrop",
            crop__service__pb2.CreateCropRequest.SerializeToString,
            crop__service__pb2.CropResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetCrop(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/cropservice.CropService/GetCrop",
            crop__service__pb2.GetCropRequest.SerializeToString,
            crop__service__pb2.CropResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UpdateCrop(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/cropservice.CropService/UpdateCrop",
            crop__service__pb2.UpdateCropRequest.SerializeToString,
            crop__service__pb2.CropResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteCrop(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/cropservice.CropService/DeleteCrop",
            crop__service__pb2.DeleteCropRequest.SerializeToString,
            crop__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
